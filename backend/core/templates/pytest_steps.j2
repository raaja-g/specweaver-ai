"""
Generated step definitions for {{ requirement.title }} ({{ functional_area }})
Generated at: {{ timestamp }}
"""
from pathlib import Path
from typing import Dict, Any
import json
import re
import os

from pytest_bdd import given, when, then, scenarios, parsers
from playwright.sync_api import Page, expect
RUN_HEURISTICS = os.getenv("RUN_HEURISTICS", "0").lower() in {"1", "true", "yes"}

# Bind this step module to its Feature
FEATURE_FILE = Path(__file__).resolve().parents[2] / "features" / "{{ feature_file }}"
scenarios(str(FEATURE_FILE))


# Common environment/setup steps
@given('the test environment is configured')
def setup_environment(page: Page, execution_config):
    # Navigate to base URL so browser visibly opens and context is ready
    try:
        page.set_default_timeout(5000)
        page.set_default_navigation_timeout(10000)
    except Exception:
        pass
    base_url = execution_config.get('target_url', '/')
    page.goto(base_url, wait_until="domcontentloaded")


@given('execution mode is set to "<ui_mode>" for UI and "<api_mode>" for API')
def set_execution_mode(ui_mode: str, api_mode: str):
    # Reserved for future use: mode-specific setup
    pass


# Auto-generated explicit bindings from raw Gherkin lines
{% if given_lines %}
# Given steps
{% for line in given_lines %}
@given("{{ line | replace('"', '\\"') }}")
def given_{{ loop.index }}(page: Page, execution_config):
    # Heuristic: if the step declares a page state, open the base URL
    base_url = execution_config.get('target_url', '/')
    if re.search(r"\bI am on\b|\bpage\b|\bhomepage\b", "{{ line }}", flags=re.IGNORECASE):
        try:
            page.set_default_timeout(5000)
            page.set_default_navigation_timeout(10000)
        except Exception:
            pass
        page.goto(base_url, wait_until="domcontentloaded")
    # Additional preconditions can be implemented here
    pass
{% endfor %}
{% endif %}

{% if when_lines %}
# When steps
{% for line in when_lines %}
@when("{{ line | replace('"', '\\"') }}")
def when_{{ loop.index }}(page: Page):
    if not RUN_HEURISTICS:
        return
    # Heuristics for common actions
    m = re.search(r"click (?:the )?'([^']+)' (?:button|link)", "{{ line }}", re.IGNORECASE)
    if m:
        name = m.group(1)
        try:
            page.get_by_role('button', name=name, exact=False).first.click(timeout=2000)
        except Exception:
            page.get_by_text(name, exact=False).first.click(timeout=2000)
        return
    m = re.search(r"enter '([^']*)' .*email", "{{ line }}", re.IGNORECASE)
    if m:
        try:
            page.get_by_label('Email', exact=False).first.fill(m.group(1), timeout=2000)
        except Exception:
            page.locator("input[type='email']").first.fill(m.group(1), timeout=2000)
    m = re.search(r"password '([^']+)'", "{{ line }}", re.IGNORECASE)
    if m:
        try:
            page.get_by_label('Password', exact=False).first.fill(m.group(1), timeout=2000)
        except Exception:
            page.locator("input[type='password']").first.fill(m.group(1), timeout=2000)
    m = re.search(r"enter \"([^\"]+)\" .*search bar.*press Enter", "{{ line }}", re.IGNORECASE)
    if m:
        term = m.group(1)
        try:
            page.get_by_placeholder('Search', exact=False).first.fill(term, timeout=2000)
        except Exception:
            page.locator('input[type="search"]').first.fill(term, timeout=2000)
        page.keyboard.press('Enter')
    # Extend with more heuristics as needed
    pass
{% endfor %}
{% endif %}

{% if then_lines %}
# Then steps
{% for line in then_lines %}
@then("{{ line | replace('"', '\\"') }}")
def then_{{ loop.index }}(page: Page):
    if not RUN_HEURISTICS:
        return
    # Generic visibility checks for expected text phrases
    m = re.search(r"'([^']+)'", "{{ line }}")
    if m:
        expect(page.get_by_text(m.group(1), exact=False)).to_be_visible(timeout=3000)
        return
    # Otherwise leave as TODO
    pass
{% endfor %}
{% endif %}


# Optional action router for structured actions
@when(parsers.parse('I perform "{action}" with params:\n{params}'))
def perform_action(page: Page, action: str, params: str):
    params_dict: Dict[str, Any] = json.loads(params)
    action_handlers = {
        {% for action in unique_actions %}
        "{{ action }}": handle_{{ action | replace('.', '_') }},
        {% endfor %}
    }
    if handler := action_handlers.get(action):
        handler(page, params_dict)
    else:
        # Fallback: no-op until implemented
        pass

{% for action in unique_actions %}
def handle_{{ action | replace('.', '_') }}(page: Page, params: Dict[str, Any]):
    # TODO: implement handler for {{ action }}
    pass
{% endfor %}
